class DDSGlobal{static instance=null;#e=null;#t=null;#a={};get screen(){return this.#e||{}}set screen(e){this.#e=e}get data(){return this.#t||{}}set data(e){this.#t=e}storeTemplate(e,t,a,r,s,n){return this.#r(e,t,a,r,s,n),n}loadTemplate(e,t,a,r,s){return this.#a[e]?.[t]?.[a]?.[r]?.[s]}#r(...e){let t=this.#a;return e.forEach((e=>{t[e]||(t[e]={}),t=t[e]})),t}toName(e){return'string'==typeof e&&(e=e.split(',')),e.map((e=>e.replace('*','#'))).sort().join('_')}static{DDSGlobal.instance=new DDSGlobal,Object.seal(DDSGlobal)}}var e=DDSGlobal.instance;class DDSData extends HTMLElement{#s=new DOMParser;get templateName(){return e.toName(this.dataset.records)}get template(){const t=this.dataset,a=e.toName(t.records);return e.loadTemplate(t.system,t.partition,t.library,t.object,a)}get url(){const e=this.dataset,t=1==e.rest,a=`${e.url||location.origin}`,r=t?`/${e.system}/${e.partition}/${e.library}/${e.object}/${e.templateName}`:'/',s=t?new URL(r,a):new URL(a);return t||(s.searchParams.append('system',e.system),s.searchParams.append('partition',e.partition),s.searchParams.append('library',e.library),s.searchParams.append('object',e.object),s.searchParams.append('template',e.templateName)),s}async workflow(){const t=this;if(!t.template){const e=await t.load(),a=t.preprocess(e);t.save(a)}return e.data=t.extract(),t.template}async load(){const e=await fetch(this.url);return await e.text()}save(t){const a=this.dataset,r=e.toName(a.records);e.saveTemplate(a.system,a.partition,a.library,a.object,r,t)}preprocess(e){const t=this.#s.parseFromString(e,'text/xml'),a=a.documentElement;Array.from(a.querySelectorAll('dds-window')).forEach((e=>{const a=t.createElement('dds-subfile-control');e.appendChild(a),Array.from(e.attributes).forEach((e=>a.setAttribute(e.name,e.value)))}));return Array.from(a.querySelectorAll('dds-subfile')).forEach((e=>{const t=a.querySelector(`dds-subfile-control[name="${e.getAttribute('sfctl')}"]`);t&&t.appendChild(e)})),a}extract(){this.template,e.screen}static{customElements.define('dds-data',DDSData),Object.seal(DDSData)}}class DDSRender extends HTMLElement{static{customElements.define('dds-render',DDSRender),Object.seal(DDSRender)}}class FaceliftEngine extends HTMLElement{static{customElements.define('facelift-engine',FaceliftEngine),Object.seal(FaceliftEngine)}}export{DDSData,e as DDSGlobal,DDSRender,FaceliftEngine};
//# sourceMappingURL=io.greenscreens.facelift.core.esm.min.js.map
