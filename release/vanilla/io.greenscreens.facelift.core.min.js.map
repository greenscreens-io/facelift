{"version":3,"file":"io.greenscreens.facelift.core.min.js","sources":["../../modules/dds/DDSGlobal.mjs","../../modules/dds/DDSData.mjs","../../modules/dds/DDSRender.mjs","../../modules/base/FaceliftEngine.mjs","../../modules/base/FaceliftElement.mjs","../../modules/components/FaceliftAction.mjs","../../modules/components/FaceliftCombo.mjs","../../modules/components/FaceliftList.mjs","../../modules/components/FaceliftLookup.mjs","../../modules/components/FaceliftSubfile.mjs","../../modules/components/FaceliftWindow.mjs"],"sourcesContent":["/*\r\n * Copyright (C) 2015, 2024 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * A module keeping DDS templates and active screen data\r\n * @module facelift/DDSGlobal\r\n */\r\nclass DDSGlobal  {\r\n\r\n    static instance = null;\r\n    #screen = null;\r\n    #data = null;\r\n    #cache = {};\r\n\r\n    /**\r\n     * Rae 5250 dispaly exported data\r\n     */\r\n    get screen() {\r\n        return this.#screen || {};\r\n    }\r\n\r\n    set screen(o) {\r\n        this.#screen = o;\r\n    }\r\n\r\n    /**\r\n     * Data converted from screen data\r\n     */\r\n    get data() {\r\n        return this.#data || {};\r\n    }\r\n\r\n    set data(o) {\r\n        this.#data = o;\r\n    }\r\n\r\n    /**\r\n     * Store prepared dds-data template\r\n     * @param {string} system \r\n     * @param {string} partition \r\n     * @param {string} library \r\n     * @param {string} object \r\n     * @param {string} name \r\n     * @param {DOM} template \r\n     */\r\n    storeTemplate(system, partition, library, object, name, template) {\r\n        this.#buildTree(system, partition, library, object, name,  template);\r\n        return template;\r\n    }\r\n\r\n    /**\r\n     * Load previously stored template\r\n     * @param {string} system \r\n     * @param {string} partition \r\n     * @param {string} library \r\n     * @param {string} object \r\n     * @param {string} name \r\n     * @returns {DOM}\r\n     */\r\n    loadTemplate(system, partition, library, object, name) {\r\n        return this.#cache[system]?.[partition]?.[library]?.[object]?.[name];\r\n    }\r\n\r\n    /**\r\n     * Helper to recursively create object nodes\r\n     * @param  {...any} keys \r\n     * @returns \r\n     */\r\n    #buildTree(...keys) {\r\n        let o = this.#cache;\r\n        keys.forEach(v => {if(o[v]) {o = o[v]} else {o[v]={};o = o[v]}});\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Convert list of string values into single string.\r\n     * Data is sorted and merged with underscore.\r\n     * used to create tempalte name from currently used records\r\n     * @param {Array|String} records \r\n     * @returns \r\n     */\r\n    toName(records) {\r\n        if (typeof records === 'string' ) records = records.split(',');\r\n        return records.map(v => v.replace('*', '#')).sort().join('_');\r\n    }\r\n\r\n    static {\r\n        DDSGlobal.instance  = new DDSGlobal();\r\n        Object.seal(DDSGlobal);\r\n    }\r\n}\r\n\r\nexport default DDSGlobal.instance;","/*\r\n * Copyright (C) 2015, 2024 Green Screens Ltd.\r\n */\r\n\r\nimport DDSGlobal from './DDSGlobal.mjs';\r\n\r\n/**\r\n * A module loading DDS partials and converting them into a tree structure\r\n * then extracting data from screen data\r\n * @module facelift/DDSData\r\n */\r\nexport default class DDSData extends HTMLElement {\r\n    \r\n    #parser = new DOMParser();\r\n\r\n    /**\r\n     * Create escaped template name based on provided list of used records\r\n     */\r\n    get templateName() {\r\n        return DDSGlobal.toName(this.dataset.records);        \r\n    }\r\n\r\n    /**\r\n     * Get DOM dds-data template from cache if exist\r\n     */\r\n    get template() {\r\n        const me = this;\r\n        const o = me.dataset;\r\n        const name = DDSGlobal.toName(o.records);\r\n        return DDSGlobal.loadTemplate(o.system, o.partition, o.library, o.object, name);\r\n    }\r\n\r\n    /**\r\n     * Get template root url\r\n     */\r\n    get url() {\r\n        const me = this;\r\n        const o = me.dataset;\r\n        const isRest = o.rest == true;\r\n        const origin = `${o.url || location.origin}`\r\n        const src = isRest ? `/${o.system}/${o.partition}/${o.library}/${o.object}/${o.templateName}` : '/';\r\n        const url = isRest ? new URL(src, origin) : new URL(origin);\r\n        if (!isRest) {\r\n            url.searchParams.append('system', o.system);\r\n            url.searchParams.append('partition', o.partition);\r\n            url.searchParams.append('library', o.library);\r\n            url.searchParams.append('object', o.object);\r\n            url.searchParams.append('template', o.templateName);    \r\n        }\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * Use \"this\" element provided attribute data to prepare \r\n     * template from partials and JSON data from screen data\r\n     */\r\n    async workflow() {\r\n        const me = this;\r\n        if (!me.template) {\r\n            const xml = await me.load();\r\n            const template = me.preprocess(xml);\r\n            me.save(template);\r\n        }\r\n        DDSGlobal.data = me.extract();\r\n        return me.template;\r\n    }\r\n\r\n    /**\r\n     * Load partials from server\r\n     */\r\n    async load() {\r\n        const me = this;\r\n        const res = await fetch(me.url);\r\n        return await res.text();\r\n    }\r\n\r\n    /**\r\n     * Store data template created from partials\r\n     * @param {DOM} template \r\n     */\r\n    save(template) {\r\n        const me = this;\r\n        const o = me.dataset;\r\n        const name = DDSGlobal.toName(o.records);\r\n        DDSGlobal.saveTemplate(o.system, o.partition, o.library, o.object, name, template);\r\n    }\r\n\r\n    /**\r\n     * Restructure set of DSPF DDS partials\r\n     * Received XML document is concatenation of DDS DSP record formats\r\n     * Document is parsed into the DOM and then reorganized in tree structure\r\n     * window->sfctl->sfl or sfctl->sfl or record\r\n     */\r\n    preprocess(template) {\r\n        const me = this;\r\n        const dom = me.#parser.parseFromString(template, 'text/xml');\r\n        const root = root.documentElement;\r\n\r\n        const win = Array.from(root.querySelectorAll('dds-window'));                \r\n        win.forEach(el => {\r\n            const cl = dom.createElement('dds-subfile-control');\r\n            el.appendChild(cl);\r\n            Array.from(el.attributes).forEach(a => cl.setAttribute(a.name, a.value));\r\n        });\r\n        \r\n        const sfl = Array.from(root.querySelectorAll('dds-subfile'));\r\n        sfl.forEach(el => {\r\n            const p = root.querySelector(`dds-subfile-control[name=\"${el.getAttribute('sfctl')}\"]`);\r\n            if (p) p.appendChild(el);\r\n        });\r\n\r\n        return root;\r\n    }\r\n\r\n    /**\r\n     * Extract data from screen data based on dds-data template\r\n     * This engine detects window/sfctl offsets, subfile size and sfctl ofsets\r\n     */\r\n    extract() {\r\n        const me = this;\r\n        const dom = me.template;\r\n        const scr = DDSGlobal.screen;\r\n\r\n    }\r\n\r\n\r\n    static {\r\n        customElements.define('dds-data', DDSData);\r\n        Object.seal(DDSData);\r\n    }\r\n}","/*\r\n * Copyright (C) 2015, 2024 Green Screens Ltd.\r\n */\r\n\r\nimport DDSGlobal from './DDSGlobal.mjs';\r\n\r\n/**\r\n * A module loading DDS template or renders one\r\n * then injects it into DOM\r\n * @module facelift/DDSRender\r\n */\r\nexport default class DDSRender extends HTMLElement {\r\n\r\n    static {\r\n        customElements.define('dds-render', DDSRender);\r\n        Object.seal(DDSRender);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2024 Green Screens Ltd.\r\n */\r\n\r\nimport DDSGlobal from '../dds/DDSGlobal.mjs';\r\n\r\n/**\r\n * A module initializing Facelift, injecting proper elements\r\n * and interoperate them.\r\n * \r\n * @module base/FaceliftEngine\r\n */\r\nexport default class FaceliftEngine extends HTMLElement {\r\n\r\n    static {\r\n        customElements.define('facelift-engine', FaceliftEngine);\r\n        Object.seal(FaceliftEngine);\r\n    }\r\n}","\r\n/*\r\n * Copyright (C) 2015, 2024 Green Screens Ltd.\r\n */\r\n\r\n\r\n/**\r\n * Main Facelift Element used by all other components\r\n * \r\n * @module base/FaceliftElement\r\n */\r\nexport default class FaceliftElement extends HTMLElement {\r\n\r\n\r\n}","\r\n/*\r\n * Copyright (C) 2015, 2024 Green Screens Ltd.\r\n */\r\n\r\nimport FaceliftElement from '../base/FaceliftElement.mjs';\r\n\r\n/**\r\n * Component representing clickable button.\r\n * Action send click event on specific terminal location,\r\n * or send terminal key with optionally populate a field.\r\n * \r\n * @module components/FaceliftAction\r\n */\r\nexport default class FaceliftAction extends FaceliftElement {\r\n\r\n    \r\n    static {\r\n        customElements.define('facelift-action', FaceliftAction);\r\n        Object.seal(FaceliftAction);\r\n    }\r\n}","\r\n/*\r\n * Copyright (C) 2015, 2024 Green Screens Ltd.\r\n */\r\n\r\nimport FaceliftElement from '../base/FaceliftElement.mjs';\r\n\r\n/**\r\n * Component representing selectable combo box\r\n * Has ability to export screen JSON data for selection list rendering\r\n * \r\n * @module components/FaceliftCombo\r\n */\r\nexport default class FaceliftCombo extends FaceliftElement {\r\n\r\n    \r\n    static {\r\n        customElements.define('facelift-combo', FaceliftCombo);\r\n        Object.seal(FaceliftCombo);\r\n    }\r\n}","\r\n/*\r\n * Copyright (C) 2015, 2024 Green Screens Ltd.\r\n */\r\n\r\nimport FaceliftElement from '../base/FaceliftElement.mjs';\r\n\r\n/**\r\n * Component representing editable list box\r\n * Has ability to export screen JSON data for selection list rendering\r\n * \r\n * @module components/FaceliftList\r\n */\r\nexport default class FaceliftList extends FaceliftElement {\r\n\r\n    \r\n    static {\r\n        customElements.define('facelift-list', FaceliftList);\r\n        Object.seal(FaceliftList);\r\n    }\r\n}","\r\n/*\r\n * Copyright (C) 2015, 2024 Green Screens Ltd.\r\n */\r\n\r\nimport FaceliftElement from '../base/FaceliftElement.mjs';\r\n\r\n/**\r\n * Component representing windowd popup box for data selection\r\n  * \r\n * @module components/FaceliftLookup\r\n */\r\nexport default class FaceliftLookup extends FaceliftElement {\r\n\r\n    \r\n    static {\r\n        customElements.define('facelift-lookup', FaceliftLookup);\r\n        Object.seal(FaceliftLookup);\r\n    }\r\n}","\r\n/*\r\n * Copyright (C) 2015, 2024 Green Screens Ltd.\r\n */\r\n\r\nimport FaceliftElement from '../base/FaceliftElement.mjs';\r\n\r\n/**\r\n * Component representing DDS subfile\r\n * Render interactive table with screen data as records\r\n * \r\n * @module components/FaceliftSubfile\r\n */\r\nexport default class FaceliftSubfile extends FaceliftElement {\r\n\r\n    \r\n    static {\r\n        customElements.define('facelift-subfile', FaceliftSubfile);\r\n        Object.seal(FaceliftSubfile);\r\n    }\r\n}","\r\n/*\r\n * Copyright (C) 2015, 2024 Green Screens Ltd.\r\n */\r\n\r\nimport FaceliftElement from '../base/FaceliftElement.mjs';\r\n\r\n/**\r\n * Component representing DDS Window.\r\n * Displays as web dialog\r\n * \r\n * @module components/FaceliftWindow\r\n */\r\nexport default class FaceliftWindow extends FaceliftElement {\r\n\r\n    \r\n    static {\r\n        customElements.define('facelift-window', FaceliftWindow);\r\n        Object.seal(FaceliftWindow);\r\n    }\r\n}"],"names":["DDSGlobal","static","screen","data","cache","this","o","storeTemplate","system","partition","library","object","name","template","buildTree","loadTemplate","keys","forEach","v","toName","records","split","map","replace","sort","join","instance","Object","seal","DDSGlobal$1","DDSData","HTMLElement","parser","DOMParser","templateName","dataset","url","isRest","rest","origin","location","src","URL","searchParams","append","workflow","me","xml","load","preprocess","save","extract","res","fetch","text","saveTemplate","dom","parseFromString","root","documentElement","Array","from","querySelectorAll","el","cl","createElement","appendChild","attributes","a","setAttribute","value","p","querySelector","getAttribute","customElements","define","DDSRender","FaceliftEngine","FaceliftElement","FaceliftAction","FaceliftCombo","FaceliftList","FaceliftLookup","FaceliftSubfile","FaceliftWindow"],"mappings":"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"}